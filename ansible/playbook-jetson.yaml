---
- name: ansible-jetson
  hosts: jetson
  become: yes
  tasks:

    - name: Update all packages
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 3600

    - name: Set the correct hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Set static ip
      blockinfile:
        path: /etc/network/interfaces
        block: |
          auto eth0
          iface eth0 inet static
            address {{ ansible_host }}
            netmask 255.255.255.0
            gateway 192.168.0.1
            dns-nameservers 1.1.1.1 1.0.0.1

    - name: Set WiFi access point
      copy:
        src: templates/SPRAYai_ap
        dest: /etc/NetworkManager/system-connections/SPRAYai-37ebde24-06d9-421d-9069-51a7ad5f5312
        mode: '600'
        owner: root
        group: root

    - name: Restart network manager
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: NetworkManager

    - name: Install other applications
      apt:
        name:
        - python3-pip
        - python3-venv
        - vim
        - fish
        - git

        # The below are required for Docker installation
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - libffi-dev

        state: latest

    # --- Install Docker ---
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Install docker-ce
      apt:
        name: docker-ce
        state: present
        update_cache: false

    - name: Run and enable Docker
      service:
        name: docker
        state: started
        enabled: true

    - name: Setup Docker Python module
      pip:
        name: docker

    - name: Create docker group
      ansible.builtin.group:
        name: docker
        state: present

    # --- User configuration ---
    - name: Setup user
      user:
        name: "{{ inventory_hostname }}"
        shell: /usr/bin/fish
        # Default password is 'jn'
        password: $6$sY/ORKnopVEFlG1U$Eku3AzF8S4DsLf3rstzhSeLNJugkzl81Q0MqGQUIk7BuRJJttk211Vd461XJKh6UGgOFWc2LY509Z084IsPvA0
        groups: dialout,sudo,audio,video,plugdev,netdev,docker
        append: yes

    - name: Create .ssh folder
      file:
        path: "~{{ inventory_hostname }}/.ssh"
        state: directory
        owner: "{{ inventory_hostname }}"
        group: "{{ inventory_hostname }}"
        mode: 0700

    - name: Upload SSH key
      copy:
        src: ../keys/navvy_rsa.pub
        dest: "~{{ inventory_hostname }}/.ssh/authorized_keys"
        owner: "{{ inventory_hostname }}"
        group: "{{ inventory_hostname }}"
        mode: 0700

    - name: Clone latest repo
      ansible.builtin.git:
        repo: https://github.com/XDGFX/navvy-spray-ai.git
        dest: "/home/{{ inventory_hostname }}/navvy-spray-ai"

    # --- Docker setup ---
    - name: Set default Docker runtime to Nvidia
      copy:
        src: templates/docker-daemon-jetson.json
        dest: /etc/docker/daemon.json

    - name: Build inference container (This might take a very long time!)
      docker_image:
        name: yolov4
        tag: v1
        build:
          path: "/home/{{ inventory_hostname }}/navvy-spray-ai/deployments/detector"
        source: build
        state: present

    - name: Start inference container
      docker_container:
        name: inference
        image: yolov4:v1
        state: started
        restart_policy: always
        published_ports:
          - 5050:5050

    - name: Start redis container
      docker_container:
        name: redis
        image: redis
        command: redis-server
        state: started
        restart_policy: always
        published_ports:
          - 6379:6379

    - name: Set text mode
      file:
        src: /lib/systemd/system/multi-user.target
        dest: /etc/systemd/system/default.target
        state: link